#!/usr/bin/env node

var path = require("path");
var fs = require("fs");
var parseArgs = require("minimist");
var hashly = require("../lib/hashly");
var pluginLoader = require("../lib/plugin-loader");

var args = parseArgs(process.argv.slice(2), {
    "boolean": ["verbose", "clean", "ignore", "help"],
    "string": ["filter", "manifest-format", "plugins"],
    "alias": {
        "verbose": "v",
        "clean": "c",
        "filter": "f",
        "manifest-format": "m",
        "ignore": "i",
        "help": "h",
        "plugins": "p"
    }
});

if (args.help) {
    console.log(fs.readFileSync(path.resolve(__dirname, "../lib/usage.txt"), "utf8"));
    process.exit(0);
}

var cwd = process.cwd();
var sourceDir = cwd;

if (args._.length >= 1) {
    sourceDir = path.resolve(cwd, args._[0]);
}

var targetDir = sourceDir;

if (args._.length >= 2) {
    targetDir = path.resolve(cwd, args._[1]);
}

var options = {
    logger: args.verbose ? console.log : null,
    filter: args.filter || null,
    manifestFormat: args["manifest-format"],
    continueOnError: args["continue"] || false
};

var exitCode = 0;

if (args.c || args.clean || false) {
    exitCode = hashly.clean(sourceDir, options);
} else {

    options.plugins = [];

    // Load default plugins
    var pluginsDir = path.resolve(__dirname, "../plugins");
    pluginLoader.loadDirectory(pluginsDir, options.plugins);

    // Load additional plugins specified on the command line
    if (args.plugins) {
        pluginLoader.loadDirectory(path.resolve(cwd, args.plugins), options.plugins);
    }

    if (options.verbose) {
        options.plugins.forEach(function (plugin) {
            console.log("Loaded plugin " + plugin.name + "...");
        });
    }

    exitCode = hashly.processDirectory(sourceDir, targetDir, options);
}

process.exit(exitCode);