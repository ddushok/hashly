#!/usr/bin/env node

var path = require("path");
var fs = require("fs");
var parseArgs = require("minimist");
var hashly = require("../lib/hashly");
var pluginLoader = require("../lib/plugin-loader");
var cwd = process.cwd();

function readStdin(callback) {
    process.stdin.setEncoding("utf8");

    var stdin = process.stdin;
    var data = "";

    stdin.on("readable", function () {
        var chunk = this.read();
        if (chunk === null) {
            if (data) {
                return;
            } else {
                callback(null);
            }
        } else {
            data += chunk;
        }
    });

    stdin.on("end", function () {
        var files = data.split("\n")
            .filter(function (f) {
                return !!f.trim();
            })
            .map(function (f) {
                return path.resolve(cwd, f);
            });

        callback(files);
    });
}

function main(files) {
    var args = parseArgs(process.argv.slice(2), {
        "boolean": ["verbose", "clean", "ignore-errors", "help", "skip-css", "amend", "quickhash"],
        "string": ["exclude", "include", "manifest-format", "manifest-path", "plugins"],
        "alias": {
            "verbose": "v",
            "clean": "c",
            "exclude": "e",
            "manifest-format": "m",
            "ignore-errors": "i",
            "help": "h",
            "plugins": "p",
            "skip-css": "s",
            "amend": "a",
            "quickhash": "q"
        }
    });

    if (args.help) {
        console.log(fs.readFileSync(path.resolve(__dirname, "../lib/usage.txt"), "utf8"));
        process.exit(0);
    }

    var sourceDir = cwd;

    if (args._.length >= 1) {
        sourceDir = path.resolve(cwd, args._[0]);
    }

    var targetDir = sourceDir;

    if (args._.length >= 2) {
        targetDir = path.resolve(cwd, args._[1]);
    }

    var options = {
        logger: args.verbose ? console.log : null,
        logError: function (msg) {
            process.stderr.write(msg + "\n");
        },
        exclude: args.exclude || null,
        include: args.include || null,
        manifestFormat: args["manifest-format"],
        manifestPath: args["manifest-path"] ? path.resolve(cwd, args["manifest-path"]) : null,
        continueOnError: args["ignore-errors"] || false,
        processCss: !args["skip-css"],
        quickhash: args["quickhash"],
        amend: args["amend"]
    };

    var exitCode = 0;

    if (args.c || args.clean || false) {
        exitCode = hashly.clean(sourceDir, options);
    } else {

        options.plugins = [];

        // Load default plugins
        var pluginsDir = path.resolve(__dirname, "../plugins");
        pluginLoader.loadDirectory(pluginsDir, options.plugins);

        // Load additional plugins specified on the command line
        if (args.plugins) {
            pluginLoader.loadDirectory(path.resolve(cwd, args.plugins), options.plugins);
        }

        if (options.verbose) {
            options.plugins.forEach(function (plugin) {
                console.log("Loaded plugin " + plugin.name + "...");
            });
        }

        if (files) {
            exitCode = hashly.processFiles(files, sourceDir, targetDir, options);
        } else {
            exitCode = hashly.processDirectory(sourceDir, targetDir, options);
        }
    }

    process.exit(exitCode);
}

readStdin(function (files) {
    main(files);

    process.exit(0);
});